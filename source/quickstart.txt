===========
Quick Start
===========

Here's how to create a new project, which we'll call **TowelStuff**.

1. Lay out your project's main directory
========================================

The smallest python project is two files. A :ref:`setup.py
<setup_py_description>` file which describes the metadata about your project,
and a file containing Python code to implement the functionality of your
project.

In this example project we are going to add a little more to the 
project to provide the typical minimal layout of a project. We'll create
a full Python package, a directory with an `__init__.py` file, called
:ref:`towelstuff/ <towelstuff_description>`. This anticipates future growth
as our project's source code is likely to grow beyond a single module file.

We'll also create a :ref:`README.txt <readme_txt_description>`
file describing an overview of your project, and
a :ref:`LICENSE.txt <license_txt_description>` file containing the
license of your project.

That's enough to start. There are a number of other types of files a
project will often have, see the :ref:`directory_layout` for an example of
a more fully fleshed out project.

Your project will now look like::

    TowelStuff/
        LICENSE.txt
        README.txt
        setup.py
        towelstuff/
            __init__.py

2. Describe your project in the setup.py file
=============================================

There a quite a few fields you can add to a project to give it a rich set of
metadata describing the project. However, there are only three required
fields: `name`, `version`, and `packages`. The `name` field must be unique
if you wish to publish your package on the Python Package Index (PyPI).
The `version` field keeps track of different releases of the project. The
`packages` field describes where you've put the Python source code within
your project.

Our initial `setup.py` will also include information about the license
and will re-use the `README.txt` file for the `long_description` field.
This will look like::

    from distutils.core import setup

    setup(
        name='TowelStuff',
        version='0.1dev',
        packages=['towelstuff',],
        license='Creative Commons Attribution-Noncommercial-Share Alike license',
        long_description=open('README.txt').read(),
    )


3. Register your package with the Python Package Index (PyPI)
=============================================================

There is a central index of all publically available Python projects
maintained on the python.org web site named the :ref:`pypi_info`. You
will first have to visit that site, where you can register for an account.
Project's are published on PyPI in the format of::

    http://pypi.python.org/pypi/<projectname>

Your project will have to choose a name which is not already taken on PyPI.    
You can then claim your new project's name by registering the package
by running the command::

 $ python setup.py register


4. Build and check a release
============================

In the `version` field, we specified `0.1dev`. This indicates that we
are *developing* towards the `0.1` version. Right now there isn't any code
in the project. You would first write enough code to make your first release
worthwhile, then change the version field to just `0.1`, dropping the `dev`
marker.

To create a release, your source code needs to be packaged into a single
archive file. This can be done with the `sdist` command:

 $ python setup.py sdist
 
This will create a `dist` sub-directory in your project, and will wrap-up
all of your project's source code files into a distribution file,
a compressed archive file in the form of::

    TowelStuff-0.1.tar.gz

The compressed archive format defaults to `.tar.gz` files on POSIX systems,
and `.zip` files on Windows systems.

At this point, it's a good idea to uncompress the newly created source
distribution, and make sure everything is being packaged correctly. There
are a two important points to check to make sure your package is ready for release:

* The correct version number.

  While it's handy to append a `dev` marker to the version number during
  development, so that you can distinguish between code under development
  and a released version, you **never** want to publish a release with
  `dev` in the version name.

* All desired project files are included.

  This is a big one. There are a variety of different ways of indicating
  which files from your project should be included in the release, and which
  should not. For a full overview see `specifying the files to distribute
  <http://docs.python.org/distutils/sourcedist.html#specifying-the-files-to-distribute>`_.

  In our minimal example, we used the `packages` field describes a list of
  packages that are included as part of your project. If we created a 
  `towelstuff.test` package, we would need to explicitly add that package
  name to our `packages` field, so that it looked like::

    packages=['towelstuff','towelstuff.test'],

  You will also notice that the README.txt and LICENSE.txt files are not
  included as part of distribution - unless those files have checked into
  Subversion. If you aren't using Subversion for source code management,
  then you will either need to specify those files using a `MANIFEST.in`
  file (or use Distribute with a plug-in appropriate for your source code tool).


5. Upload your release, then grab your towel and save the Universe!
===================================================================

Now that you are happy that you can create a valid source distribution,
it's time to upload the finished product to PyPI. We'll also create a 
`bdist_wininst` distribution file of our project, which will create a Windows
installable file. There are a few different file formats that Python 
distributions can be created for. Each format must be specified when
you run the upload command, or they won't be uploaded (even if you've
previously built them previously). You should always upload a
source distribution file. The other formats are optional, and will depend upon
the needs of your anticipated user base::

 $ python setup.py sdist bdist_wininst upload

At this point you should announce your package to the community!

Finally, in your `setup.py` you can make plans for your next release,
by changing the `version` field to indicate which version you want to work
towards next (e.g. `0.2dev`).

This `Quick Start`_ is a good brief introduction, but does not cover a lot of
obscure use-cases. For more details, please see :doc:`introduction`,
to gain a better understanding of the :ref:`state_of_packaging_info`.
