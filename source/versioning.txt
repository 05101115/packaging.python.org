===================================
How to version your Python projects
===================================

Congratulations, you are about to release you first Python project to the
world, using the standard tool provided by Python: ``Distutils``.

This means that you have a ``setup.py`` file with something that can look
like this::

    from distutils.core import setup

    setup(name='MyProject', version='1.0', author='Tarek',
          author_email='tarek@ziade.org',
          url='http://example.com',)


And this gives you the power to register and upload your project at PyPI,
as simply as::

    $ python setup.py register sdist upload

Your project is then added in PyPI, among over 8000 other projects and
people can start using it, by downloading the archive you have created
with the ``sdist`` command.

With ``pip`` they can even install it with a simple command, ala ``apt-get``::

    $ pip install MyProject


Why you need version numbers ?
==============================

As soon as you start publishing your project to the world, you need to
version it. For example, the first version of your software can be ``1.0``.

Everytime you are releasing a new version with new features and bugfixes,
raising the version number will let your end users know that it is a
newer version. This is usally done by incrementing the version,
so your next version could be ``1.1``.

Once this new version is made available to the world at PyPI, people
will be able to install it using for example ``pip``::

    $ pip install --upgrade MyProject

The ``upgrade`` option here means that Pip will look for all published
versions at PyPI for ``MyProject`` and see which one is the latest, then
upgrade your system to that version if you are not up-to-date.

Now imagine that you have introduced a small bug in ``1.1`` that makes
your project unusable on Windows. You are working on it, but you know
it will take you some time to resolve it.

The best strategy here is to tell you Windows user to stick with ``1.0``
until you have fixed the issue. They can downgrade to ``1.0`` because
it is still available at PyPI::

    $ pip install MyProject==1.0

This is possible because ``pip`` is able to sort the various versions
of your project, as long as it follows a standard version scheme.


Standard versioning schemes
===========================

XXX

Minor vs Micro
==============

XXX

Defining your release cycle
===========================

XXX


Using a PEP 386 compatible scheme
=================================

XXX


